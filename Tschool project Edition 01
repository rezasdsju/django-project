# home/templates/home/index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Welcome to TSchool</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(to right, #87CEFA, #e0f7fa);
            height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .welcome-container {
            background-color: rgba(255, 255, 255, 0.92);
            border-radius: 20px;
            padding: 40px 60px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            text-align: center;
            margin-top: 80px;
            animation: fadeIn 1s ease-in-out;
        }

        .welcome-container h1 {
            font-size: 48px;
            color: #0d47a1;
            margin: 0 0 20px;
            text-shadow: 1px 1px 5px rgba(0, 0, 0, 0.1);
        }

        .welcome-container p {
            font-size: 20px;
            color: #333;
            margin: 0;
        }

        .features {
            margin-top: 40px;
            padding: 20px;
            background-color: rgba(255, 255, 255, 0.8);
            border-radius: 15px;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
            max-width: 500px;
        }

        .features ul {
            list-style-type: none;
            padding: 0;
            margin: 0;
        }
        
        .options-container {
            display: flex;
            gap: 20px;
            margin-top: 40px;
            padding: 20px;
        }

        .option-box {
            background-color: #fff;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            text-align: center;
            cursor: pointer;
            width: 250px;
        }

        .option-box:hover {
            transform: translateY(-10px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
        }

        .option-box a {
            text-decoration: none;
            color: #0d47a1;
            font-size: 18px;
            font-weight: 600;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(-30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @media (max-width: 768px) {
            .welcome-container {
                padding: 25px;
            }

            .welcome-container h1 {
                font-size: 34px;
            }
            
            .options-container {
                flex-direction: column;
                align-items: center;
            }

            .option-box {
                width: 90%;
            }
        }
    </style>
</head>
<body>
    <div class="welcome-container">
        <h1>Welcome to TSchool</h1>
        <p>Your Digital Academic Result Manager</p>
    </div>
    
    <div class="options-container">
        <div class="option-box">
            <a href="{% url 'create_result_sheet' %}">Create Student Result Sheet</a>
        </div>
        <div class="option-box">
            <a href="#">Read Pdf Books</a>
        </div>
        <div class="option-box">
            <a href="#">Find Tutorials</a>
        </div>
        <div class="option-box">
            <a href="{% url 'show_result' %}">View Sample Result</a>
        </div>
    </div>
</body>
</html>




# create_result_sheet.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create Student Result Sheet</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(to right, #87CEFA, #e0f7fa);
            padding: 20px;
            color: #333;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
        }
        .container {
            max-width: 900px;
            width: 100%;
            margin: 20px auto;
            background: rgba(255, 255, 255, 0.95);
            padding: 40px;
            border-radius: 15px;
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
            transition: all 0.3s ease;
        }
        h1 {
            text-align: center;
            color: #0d47a1;
            margin-bottom: 25px;
            font-size: 2.5rem;
            border-bottom: 2px solid #0d47a1;
            padding-bottom: 10px;
        }
        h2 {
            text-align: left;
            color: #2c3e50;
            margin-top: 30px;
            margin-bottom: 15px;
        }
        .form-group {
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
            color: #555;
            font-size: 1.1rem;
        }
        input[type="text"], input[type="number"] {
            width: 100%;
            padding: 12px;
            box-sizing: border-box;
            border: 1px solid #ccc;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.3s ease, box-shadow 0.3s ease;
        }
        input[type="text"]:focus, input[type="number"]:focus {
            border-color: #3498db;
            box-shadow: 0 0 8px rgba(52, 152, 219, 0.5);
            outline: none;
        }
        .subject-entry-container {
            border: 1px solid #ddd;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            background-color: #f9f9f9;
        }
        .subject-entry {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin-bottom: 15px;
        }
        .subject-entry input {
            width: auto;
        }
        .add-btn, .submit-btn {
            display: block;
            width: 100%;
            padding: 15px;
            border: none;
            border-radius: 8px;
            font-size: 1.1rem;
            font-weight: bold;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.2s ease;
        }
        .add-btn {
            background-color: #2ecc71; /* Success color */
            color: white;
            margin-bottom: 15px;
        }
        .add-btn:hover {
            background-color: #27ae60;
            transform: translateY(-2px);
        }
        .submit-btn {
            background-color: #3498db; /* Primary color */
            color: white;
            margin-top: 20px;
        }
        .submit-btn:hover {
            background-color: #2980b9;
            transform: translateY(-2px);
        }
        .back-link {
            display: inline-block;
            margin-top: 20px;
            text-align: center;
            width: 100%;
            color: #3498db;
            text-decoration: none;
            font-weight: 600;
        }
        .back-link:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Create Student Result Sheet</h1>
        <form action="{% url 'create_result_sheet' %}" method="post">
            {% csrf_token %}
            <div class="form-group">
                <label for="student_name">Student Name:</label>
                <input type="text" id="student_name" name="student_name" required>
            </div>
            
            <hr>
            
            <h2>Subject Details</h2>
            <div id="subjects_container" class="subject-entry-container">
                <div class="subject-entry">
                    <input type="text" name="subject_name_0" placeholder="Subject Name" required>
                    <input type="number" name="mark_0" step="0.01" placeholder="Mark (e.g., 85.5)" required>
                    <input type="number" name="credits_0" placeholder="Credits (e.g., 3)" required>
                    <input type="text" name="semester_0" placeholder="Semester (e.g., 1st Sem)">
                </div>
            </div>

            <button type="button" id="add_subject" class="add-btn">Add Another Subject</button>
            <button type="submit" class="submit-btn">Submit Result</button>
        </form>
        <a href="{% url 'index' %}" class="back-link">Go back to Home</a>
    </div>

    <script>
        let subjectIndex = 0;
        document.getElementById('add_subject').addEventListener('click', function() {
            subjectIndex++;
            const container = document.getElementById('subjects_container');
            const newSubjectDiv = document.createElement('div');
            newSubjectDiv.classList.add('subject-entry');
            newSubjectDiv.innerHTML = `
                <input type="text" name="subject_name_${subjectIndex}" placeholder="Subject Name" required>
                <input type="number" name="mark_${subjectIndex}" step="0.01" placeholder="Mark (e.g., 85.5)" required>
                <input type="number" name="credits_${subjectIndex}" placeholder="Credits (e.g., 3)" required>
                <input type="text" name="semester_${subjectIndex}" placeholder="Semester (e.g., 1st Sem)">
            `;
            container.appendChild(newSubjectDiv);
        });
    </script>
</body>
</html>








# home/templates/home/show_result.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Results</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(to right, #87CEFA, #e0f7fa);
            color: #333;
            padding: 20px;
        }
        .container {
            max-width: 1200px;
            margin: auto;
            background: rgba(255, 255, 255, 0.95);
            padding: 40px;
            border-radius: 15px;
            box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
        }
        h1 {
            text-align: center;
            color: #0d47a1;
            margin-bottom: 30px;
            font-size: 2.5rem;
            border-bottom: 2px solid #0d47a1;
            padding-bottom: 10px;
        }
        .student-card {
            background-color: #f9f9f9;
            border: 1px solid #ddd;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }
        .student-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1);
        }
        .student-card h2 {
            margin-top: 0;
            color: #2c3e50;
        }
        .student-info {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-bottom: 15px;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
        }
        .student-info p {
            margin: 0;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 15px;
        }
        th, td {
            text-align: left;
            padding: 12px;
            border-bottom: 1px solid #ddd;
        }
        th {
            background-color: #3498db;
            color: white;
            font-weight: bold;
        }
        tr:nth-child(even) {
            background-color: #f2f2f2;
        }
        .no-results {
            text-align: center;
            font-size: 1.2rem;
            color: #7f8c8d;
        }
        .back-link {
            display: inline-block;
            margin-top: 20px;
            text-align: center;
            width: 100%;
            color: #3498db;
            text-decoration: none;
            font-weight: 600;
        }
        .back-link:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Student Results</h1>
        <a href="{% url 'index' %}" class="back-link">Go back to Home</a>
        
        {% if students %}
            {% for student in students %}
                <div class="student-card">
                    <div class="student-info">
                        <p><strong>Student Name:</strong> {{ student.name }}</p>
                        <p><strong>Overall GPA:</strong> {{ student.cumulative_gpa|floatformat:2 }}</p>
                        <p><strong>Number of Subjects:</strong> {{ student.num_subjects }}</p>
                        <p><strong>Entry Date:</strong> {{ student.entry_date|date:"F d, Y" }}</p>
                    </div>

                    <h3>Subject Details:</h3>
                    <table>
                        <thead>
                            <tr>
                                <th>Subject</th>
                                <th>Mark</th>
                                <th>Credits</th>
                                <th>Semester</th>
                                <th>Grade</th>
                                <th>Subject GPA</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for subject in student.subjects.all %}
                                <tr>
                                    <td>{{ subject.name }}</td>
                                    <td>{{ subject.mark }}</td>
                                    <td>{{ subject.credits }}</td>
                                    <td>{{ subject.semester }}</td>
                                    <td>{{ subject.grade }}</td>
                                    <td>{{ subject.subject_gpa|floatformat:2 }}</td>
                                </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            {% endfor %}
        {% else %}
            <p class="no-results">No results found. Please <a href="{% url 'create_result_sheet' %}">create a new one</a>.</p>
        {% endif %}

    </div>
</body>
</html>













# home/views.py
# home/views.py
from django.shortcuts import render, redirect
from .models import Student, Subject
from datetime import datetime

# Function to get the GPA from a given mark
def get_gpa_from_mark(mark):
    if 80 <= mark <= 100:
        return 5.00
    elif 70 <= mark <= 79:
        return 4.00
    elif 60 <= mark <= 69:
        return 3.50
    elif 50 <= mark <= 59:
        return 3.00
    elif 40 <= mark <= 49:
        return 2.00
    else:
        return 0.00

# Function to get the letter grade from a given mark
def get_letter_grade(mark):
    if 80 <= mark <= 100:
        return "A+"
    elif 70 <= mark <= 79:
        return "A"
    elif 60 <= mark <= 69:
        return "A-"
    elif 50 <= mark <= 59:
        return "B"
    elif 40 <= mark <= 49:
        return "C"
    else:
        return "F"

# View for the homepage
def index(request):
    return render(request, 'home/index.html')

# View to create a new student result sheet
def create_result_sheet_view(request):
    if request.method == 'POST':
        student_name = request.POST.get('student_name')
        subjects_data = []

        # Collect all subject data from the dynamically added form fields
        for key in request.POST:
            if key.startswith('subject_name_'):
                index = key.split('_')[-1]
                subjects_data.append({
                    'name': request.POST.get(f'subject_name_{index}'),
                    'mark': float(request.POST.get(f'mark_{index}')),
                    'credits': int(request.POST.get(f'credits_{index}')),
                    'semester': request.POST.get(f'semester_{index}')
                })

        # Create a new student entry in the database
        student = Student.objects.create(name=student_name)
        total_gpa_points = 0
        total_credits = 0

        # Create subjects and calculate GPA for each
        for sub in subjects_data:
            subject_gpa = get_gpa_from_mark(sub['mark'])
            letter_grade = get_letter_grade(sub['mark'])

            Subject.objects.create(
                student=student,
                name=sub['name'],
                mark=sub['mark'],
                credits=sub['credits'],
                semester=sub['semester'],
                subject_gpa=subject_gpa,
                grade=letter_grade
            )
            total_gpa_points += subject_gpa * sub['credits']
            total_credits += sub['credits']

        # Calculate and update the student's overall GPA
        if total_credits > 0:
            student.cumulative_gpa = total_gpa_points / total_credits
        else:
            student.cumulative_gpa = 0.0
        student.num_subjects = len(subjects_data)
        student.save()

        # After saving, redirect to the results page
        return redirect('show_result')

    # If it's a GET request, just render the form
    return render(request, 'home/create_result_sheet.html')

# View to show all student results
def show_result(request):
    # Fetch all students from the database, ordered by the most recent entry
    students = Student.objects.all().order_by('-entry_date')
    return render(request, 'home/show_result.html', {'students': students})




# home/urls.py
# home/urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name='index'),
    path('create-result-sheet/', views.create_result_sheet_view, name='create_result_sheet'),
    path('results/', views.show_result, name='show_result'),
]







# home/models.py
# home/models.py

from django.db import models
from django.utils import timezone

class GradingScale(models.Model):
    """
    Grading Scale Model based on Tkinter's grading_scales table.
    Stores the rules for GPA calculation as a JSON field.
    """
    name = models.CharField(max_length=100, unique=True)
    rules = models.JSONField(default=dict)
    is_active = models.BooleanField(default=False)

    def __str__(self):
        return self.name

class Student(models.Model):
    """
    Student Model based on Tkinter's students table.
    """
    name = models.CharField(max_length=200)
    entry_date = models.DateTimeField(default=timezone.now)
    cumulative_gpa = models.FloatField(default=0.0)
    num_subjects = models.IntegerField(default=0)

    def __str__(self):
        return self.name

class Subject(models.Model):
    """
    Subject Model based on Tkinter's subjects table.
    Links back to the Student model with a ForeignKey.
    """
    student = models.ForeignKey(Student, on_delete=models.CASCADE, related_name='subjects')
    name = models.CharField(max_length=100)
    mark = models.FloatField()
    credits = models.IntegerField(default=0)
    semester = models.CharField(max_length=50, blank=True, null=True)
    grade = models.CharField(max_length=10, blank=True, null=True)
    subject_gpa = models.FloatField(blank=True, null=True)

    def __str__(self):
        return f"{self.name} ({self.student.name})"









# tschool_project/settings.py
"""
Django settings for tschool_project project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-j&avjab3hpdqg1y^0shq0e*n#!+1t7(nrr+-3p&66q5#ng039+'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'home',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'tschool_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'tschool_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



# tschool_projects/urls.py
from django.contrib import admin
from django.urls import path, include  # <-- এখানে 'include' যুক্ত করতে হবে

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('home.urls')),  # <-- এই লাইনটি যুক্ত করুন
]






#tschool_project/manage.py
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tschool_project.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
